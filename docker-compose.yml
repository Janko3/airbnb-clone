version: "3.8"

services:
  auth-service:
    build:
      context: .
      dockerfile: ./auth-service/Dockerfile
    image: auth-service
    container_name: auth-service
    restart: always
    hostname: "auth-server"
    depends_on:
      - auth-db
    environment:
      - PORT=8080
      - JWT_SECRET=${JWT_SECRET}
      - MONGO_DB_URI=mongodb://root:pass@auth-db:27017
      - SECRET_KEY=${SECRET_ENCRIPTION_KEY}
      - MAIL_SERVICE_HOST=${MAIL_SERVICE_HOST}
      - MAIL_SERVICE_PORT=${MAIL_SERVICE_PORT}
      - USER_SERVICE_HOST=${USER_SERVICE_HOST}
      - USER_SERVICE_PORT=${USER_SERVICE_PORT}
    networks:
      - network

  notifications-service:
    build:
      context: .
      dockerfile: ./notifications-service/Dockerfile
    image: notifications-service
    container_name: notifications-service
    restart: always
    hostname: "notifications-server"
    depends_on:
      - notifications-db
    environment:
      - PORT=8080
      - MONGO_DB_URI=mongodb://root:pass@notifications-db:27017
    networks:
      - network

  mail-service:
    build:
      context: .
      dockerfile: ./mail-service/Dockerfile
    image: mail-service
    container_name: mail-service
    restart: always
    hostname: "mail-server"
    environment:
      - PORT=8080
      - EMAIL=${EMAIL}
      - PASSWORD=${PASSWORD}
    networks:
      - network

  auth-db:
    image: mongo
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: pass
      MONGO_INITDB_DATABASE: mongoDemo
      ME_CONFIG_MONGODB_SERVER: mongo
    # Docker healtcheck - checks if database is "alive"
    healthcheck:
      test: echo 'db.runCommand("ping").ok'
      interval: 10s
      timeout: 10s
      retries: 10
    volumes:
      - auth-db_store:/data/db
    networks:
      - network

  accommodations-service:
    image: accommodations-service
    build:
      context: .
      dockerfile: ./accommodations-service/Dockerfile
    restart: always
    container_name: "accommodations-service"
    hostname: "accommodations-service"
    ports:
      # <port_on_local>:<port_in_machine>
      - "8080:8080"

    #Will be accessible through os.Getenv("PORT")
    environment:
      - PORT=8080
      - MONGO_DB_URI=mongodb://root:pass@accommodation-db:27017
      - RESERVATIONS_SERVICE_HOST=${RESERVATIONS_SERVICE_HOST}
      - RESERVATIONS_SERVICE_PORT=${RESERVATIONS_SERVICE_PORT}
    networks:
      - network
    depends_on:
      accommodation-db:
        condition: service_healthy

  accommodation-db:
    image: mongo
    restart: always
    ports:
      - "27018:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: pass
      MONGO_INITDB_DATABASE: mongoDemo
    # Docker healtcheck - checks if database is "alive"
    healthcheck:
      test: echo 'db.runCommand("ping").ok'
      interval: 10s
      timeout: 10s
      retries: 10
    volumes:
      - accommodation-db_store:/data/db
    networks:
      - network

  reservations-service:
    image: reservations-service
    build:
      context: .
      dockerfile: ./reservations-service/Dockerfile
    restart: always
    container_name: "reservations-server"
    hostname: "reservations-server"
    #Will be accessible through os.Getenv("PORT")
    environment:
      - PORT=8080
      # NoSQL: environment variable holding connection URI for Cassandra database
      - CASS_DB=reservations-db:9042
    # NoSQL: Extremely important! Cassandra takes a lot of time to start!
    # If we don't wait for it to fully initialize we will get exceptions and will not be able to connect!
    depends_on:
      reservations-db:
        condition: service_healthy
    networks:
      - network

  reservations-db:
    image: cassandra
    restart: always
    ports:
      - "9042:9042"
    # Docker healtcheck - checks if database is "alive"
    healthcheck:
      test: ["CMD-SHELL", "cqlsh -e 'describe cluster'"]
      interval: 15s
      timeout: 15s
      retries: 15
    volumes:
      - cass_store:/var/lib/cassandra/data
    networks:
      - network

  user-service:
    image: user-service
    build:
      context: .
      dockerfile: ./user-service/Dockerfile
    restart: always
    container_name: "user-service"
    hostname: "user-service"
    environment:
      - PORT=8080
      - MONGO_DB_URI=mongodb://root:pass@user-db:27017
    networks:
      - network
    depends_on:
      user-db:
        condition: service_healthy

  user-db:
    image: mongo
    restart: always
    ports:
      - "27019:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: pass
      MONGO_INITDB_DATABASE: mongoDemo
    # Docker healtcheck - checks if database is "alive"
    healthcheck:
      test: echo 'db.runCommand("ping").ok'
      interval: 15s
      timeout: 15s
      retries: 10
    volumes:
      - user-db_store:/data/db
    networks:
      - network

  notifications-db:
    image: mongo
    restart: always
    ports:
      - "27020:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: pass
      MONGO_INITDB_DATABASE: mongoDemo
    # Docker healtcheck - checks if database is "alive"
    healthcheck:
      test: echo 'db.runCommand("ping").ok'
      interval: 15s
      timeout: 15s
      retries: 10
    volumes:
      - notifications-db_store:/data/db
    networks:
      - network

  api-gateway:
    build:
      context: ./api-gateway/
      dockerfile: Dockerfile
    container_name: api-gateway
    hostname: api-gateway
    restart: on-failure
    ports:
      - "443:443"
    depends_on:
      - auth-service
      - accommodations-service
      - reservations-service
      - user-service
      - notifications-service
    networks:
      - network

networks:
  network:
    driver: bridge

volumes:
  auth-db-mongo-express:
  auth-db_store:
  accommodation-db_store:
  cass_store:
  user-db_store:
  notifications-db_store:
